{"version":3,"sources":["App.js","serviceWorker.js","App1.js","index.js"],"names":["App","args","handleInput","evt","setState","newTodoVal","target","value","handleDelete","id","todos","state","filter","x","handleComplete","map","done","handleSubmit","push","uuidv4","title","preventDefault","className","this","key","onClick","onSubmit","type","onChange","React","Component","Boolean","window","location","hostname","match","App1","ReactDOM","render","StrictMode","basename","component","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7f66b89.chunk.js","sourcesContent":["import React from \"react\";\nimport \"bulma/css/bulma.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App extends React.Component {\n  constructor(args) {\n    super(args);\n\n    this.state = {\n      todos: [],\n      newTodoVal: \"\",\n    };\n  }\n  handleInput = (evt) => {\n    this.setState({ newTodoVal: evt.target.value });\n  };\n  handleDelete = (id) => {\n    this.setState({\n      todos: this.state.todos.filter((x) => x.id !== id),\n    });\n  };\n  handleComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((x) => {\n        if (x.id === id) {\n          x.done = true;\n        }\n        return x;\n      }),\n    });\n  };\n  handleSubmit = (evt) => {\n    let todos = this.state.todos;\n    todos.push({\n      id: uuidv4(),\n      title: this.state.newTodoVal,\n      done: false,\n    });\n    this.setState({\n      todos,\n      newTodoVal: \"\",\n    });\n    evt.preventDefault();\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Todo List</h1>\n        <hr></hr>\n        {this.state.todos.map((x) => {\n          return (\n            <div className=\"columns\" key={x.id}>\n              <div className=\"column is-one-third\">\n                {x.title} -{\" \"}\n                {x.done ? (\n                  <span className=\"has-text-success\">Done!</span>\n                ) : (\n                  <span className=\"has-text-danger\">Not done</span>\n                )}\n              </div>\n              <div className=\"column columns is-one-thid\">\n                <div className=\"column is-one-fifth\">\n                  <button\n                    className=\"button is-success\"\n                    onClick={() => this.handleComplete(x.id)}\n                  >\n                    Complete\n                  </button>\n                </div>\n                <div className=\"column is-one-fifth\">\n                  <button\n                    className=\"button is-danger\"\n                    onClick={() => this.handleDelete(x.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        <form id=\"add-todo\" onSubmit={this.handleSubmit}>\n          <div className=\"columns\">\n            <div className=\"column is-one-third\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={this.state.newTodoVal}\n                onChange={this.handleInput}\n              />\n            </div>\n            <div className=\"column is-one-third\">\n              <button className=\"button\">Add+</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"bulma/css/bulma.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App1 extends React.Component {\n  constructor(args) {\n    super(args);\n\n    this.state = {\n      todos: [],\n      newTodoVal: \"\",\n    };\n  }\n  handleInput = (evt) => {\n    this.setState({ newTodoVal: evt.target.value });\n  };\n  handleDelete = (title) => {\n    this.setState({\n      todos: this.state.todos.filter((x) => x.title !== title),\n    });\n  };\n  handleComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((x) => {\n        if (x.id === id) {\n          x.done = true;\n        }\n        return x;\n      }),\n    });\n  };\n  handleSubmit = (evt) => {\n    let todos = this.state.todos;\n    todos.push({\n      id: uuidv4(),\n      title: this.state.newTodoVal,\n      done: false,\n    });\n    this.setState({\n      todos,\n      newTodoVal: \"\",\n    });\n    evt.preventDefault();\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Todo List</h1>\n        <hr></hr>\n        {this.state.todos.map((x) => {\n          return (\n            <div className=\"columns\" key={x.id}>\n              <div className=\"column is-one-third\">\n                {x.title} -{\" \"}\n                {x.done ? (\n                  <span className=\"has-text-success\">Done!</span>\n                ) : (\n                  <span className=\"has-text-danger\">Not done</span>\n                )}\n              </div>\n              <div className=\"column columns is-one-thid\">\n                <div className=\"column is-one-fifth\">\n                  <button\n                    className=\"button is-success\"\n                    onClick={() => this.handleComplete(x.id)}\n                  >\n                    Complete\n                  </button>\n                </div>\n                <div className=\"column is-one-fifth\">\n                  <button\n                    className=\"button is-danger\"\n                    onClick={() => this.handleDelete(x.title)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        <form id=\"add-todo\" onSubmit={this.handleSubmit}>\n          <div className=\"columns\">\n            <div className=\"column is-one-third\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                value={this.state.newTodoVal}\n                onChange={this.handleInput}\n              />\n            </div>\n            <div className=\"column is-one-third\">\n              <button className=\"button\">Add+</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App1;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Switch, Route, HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App1 from \"./App1\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <Switch>\n        <Route component={App1} path=\"/1\" />\n        <Route component={App} path=\"/\" />\n      </Switch>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}